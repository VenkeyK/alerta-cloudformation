{
    "AWSTemplateFormatVersion": "2010-09-09",

    "Description": "Alerta monitoring system",

    "Parameters": {
        "KeyName": {
            "Description": "Name of an existing EC2 KeyPair for SSH access",
            "Type": "String",
            "Default": "bootstrap"
        },
        "Stack": {
            "Description": "Stack",
            "Type": "String",
            "Default": "monitoring"
        },
        "App": {
            "Description": "App name",
            "Type": "String",
            "Default": "alerta"
        },
        "Stage": {
            "Description": "Stage",
            "Type": "String",
            "Default": "PROD",
            "AllowedValues": ["PROD","CODE"],
            "ConstraintDescription": "must be a valid stage eg. PROD, CODE"
        },
        "InstanceType": {
            "Description": "EC2 instance type",
            "Type": "String",
            "Default": "t2.micro",
            "AllowedValues": [
                "t2.micro",
                "t2.small",
                "t2.medium"
            ],
            "ConstraintDescription": "must be a valid EC2 instance type."
        },
        "HostedZone" : {
            "Description" : "DNS hosted zone for which A CNAME will be created. e.g. 'example.com' for alerta.example.com. Leave blank for no CNAME.",
            "Type" : "String"
        },
        "CookieSecret": {
            "Description": "Secret used to sign the session ID cookie ie. any random string",
            "Type": "String",
            "NoEcho": true
        },
        "GoogleOAuthClientId": {
            "Description": "Google OAuth2 Client ID",
            "Type": "String"
        },
        "GoogleOAuthClientSecret": {
            "Description": "Google OAuth 2.0 Client Secret",
            "Type": "String"
        },
        "AlarmTopic": {
            "Default": "alarm-topic",
            "Description": "Output alarm notification topic",
            "Type": "String",
            "AllowedPattern": "[a-zA-Z0-9-]+"
        },
        "OperatorEmail": {
            "Description": "email address to notify if there are operational issues",
            "Type": "String"
        },
        "VpcId": {
            "Description": "ID of the VPC onto which to launch the application eg. vpc-1234abcd",
            "Type": "String",
            "Default": "vpc-1234abcd"
        },
        "PublicVpcSubnets": {
            "Description": "Subnets to use in VPC for public internet-facing instance eg. subnet-abcd1234",
            "Type": "CommaDelimitedList",
            "Default": "subnet-abcd1234"
        },
        "SSHLocation": {
            "Description": "The IP address range that can be used to SSH to the EC2 instances",
            "Type": "String",
            "MinLength": "9",
            "MaxLength": "18",
            "Default": "0.0.0.0/0",
            "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
            "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x"
        }
    },

    "Conditions": {
        "HasDNS": {"Fn::Not" : [{"Fn::Equals" : [{"Ref" : "HostedZone"}, ""]}]}
    },

    "Resources": {
        "CfnUser": {
            "Type": "AWS::IAM::User",
            "Properties": {
                "Path": "/",
                "Policies": [
                    {
                        "PolicyName": "root",
                        "PolicyDocument": {
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": "SNS:*",
                                    "Resource": "*"
                                }
                            ]
                        }
                    }
                ]
            }
        },
        "HostKeys": {
            "Type": "AWS::IAM::AccessKey",
            "Properties": {
                "UserName": {"Ref":"CfnUser"}
            }
        },
        "AlarmSnsTopic": {
            "Type": "AWS::SNS::Topic",
            "Properties": {
                "TopicName": {"Ref":"AlarmTopic"},
                "Subscription": [
                    {
                        "Endpoint": {"Ref":"OperatorEmail"},
                        "Protocol": "email"
                    }
                ]
            }
        },

        "AlertaLoadBalancer" : {
            "Type" : "AWS::ElasticLoadBalancing::LoadBalancer",
            "Properties" : {
                "CrossZone": "true",
                "Listeners" : [{
                    "Protocol" : "HTTP",
                    "LoadBalancerPort" : "80",
                    "InstancePort" : "80"
                }],
                "HealthCheck" : {
                    "Target" : "HTTP:8080/management/healthcheck",
                    "HealthyThreshold" : "2",
                    "UnhealthyThreshold" : "2",
                    "Interval" : "10",
                    "Timeout" : "5"
                },
                "Subnets": {"Ref": "PublicVpcSubnets"},
                "SecurityGroups": [
                    {"Ref": "LoadBalancerSecurityGroup"}
                ]
            }
        },
        "LoadBalancerSecurityGroup" : {
            "Type" : "AWS::EC2::SecurityGroup",
            "Properties" : {
                "GroupDescription" : "HTTP to the ELB",
                "VpcId": { "Ref": "VpcId" },
                "SecurityGroupIngress" : [
                    {
                        "IpProtocol" : "tcp",
                        "FromPort" : "80",
                        "ToPort" : "80",
                        "CidrIp" : "0.0.0.0/0"
                    }
                ],
                "SecurityGroupEgress" : [
                    {
                        "IpProtocol" : "tcp",
                        "FromPort" : "80",
                        "ToPort" : "80",
                        "CidrIp" : "0.0.0.0/0"
                    },
                    {
                        "IpProtocol" : "tcp",
                        "FromPort" : "8080",
                        "ToPort" : "8080",
                        "CidrIp" : "0.0.0.0/0"
                    }
                ]
            }
        },

        "AutoScalingGroup": {
            "Type": "AWS::AutoScaling::AutoScalingGroup",
            "Properties": {
                "AvailabilityZones": { "Fn::GetAZs": "" },
                "VPCZoneIdentifier": { "Ref": "PublicVpcSubnets" },
                "LaunchConfigurationName": { "Ref": "LaunchConfig" },
                "MinSize": "1",
                "MaxSize": "1",
                "DesiredCapacity": "1",
                "HealthCheckType": "ELB",
                "HealthCheckGracePeriod": 900,
                "LoadBalancerNames": [ { "Ref": "AlertaLoadBalancer" } ],
                "Tags": [
                    {"Key":"Name","Value":{"Fn::Join":[":",[{"Ref":"Stage"},"alerta"]]},"PropagateAtLaunch" : "true"},
                    {"Key":"Stage","Value":{"Ref":"Stage"},"PropagateAtLaunch" : "true"},
                    {"Key":"Stack","Value":{"Ref":"Stack"},"PropagateAtLaunch" : "true"},
                    {"Key":"App","Value":"alerta","PropagateAtLaunch" : "true"}
                ],
                "NotificationConfiguration" : {
                    "TopicARN" : {"Ref":"AlarmSnsTopic"},
                    "NotificationTypes":  [
                        "autoscaling:EC2_INSTANCE_LAUNCH",
                        "autoscaling:EC2_INSTANCE_LAUNCH_ERROR",
                        "autoscaling:EC2_INSTANCE_TERMINATE",
                        "autoscaling:EC2_INSTANCE_TERMINATE_ERROR"
                    ]
                }
            }
        },
        "LaunchConfig": {
            "Type": "AWS::AutoScaling::LaunchConfiguration",
            "Metadata": {
                "AWS::CloudFormation::Init": {
                    "config": {
                        "packages": {
                            "apt": {
                                "apache2": [],
                                "libapache2-mod-wsgi": [],
                                "mongodb-server": []
                            }
                        },
                        "sources": {
                            "/var/www/alerta": "https://github.com/alerta/angular-alerta-webui/tarball/master"
                        },
                        "files": {
                            "/etc/apache2/sites-available/000-default.conf": {
                                "content": {"Fn::Join":["",[
                                    "Listen 8080\n","<VirtualHost *:8080>\n",
                                    "  ServerName localhost\n",
                                    "  WSGIDaemonProcess alerta processes=5 threads=5\n",
                                    "  WSGIProcessGroup alerta\n",
                                    "  WSGIScriptAlias / /var/www/api.wsgi\n",
                                    "  WSGIPassAuthorization On\n",
                                    "  ErrorLog ${APACHE_LOG_DIR}/error.log\n",
                                    "  CustomLog ${APACHE_LOG_DIR}/access.log combined\n",
                                    "</VirtualHost>\n","<VirtualHost *:80>\n",
                                    "  ProxyPass /api http://localhost:8080\n",
                                    "  ProxyPassReverse /api http://localhost:8080\n",
                                    "  DocumentRoot /var/www/alerta/app\n",
                                    "</VirtualHost>\n"
                                ]]}
                            },
                            "/var/www/api.wsgi": {
                                "content": {"Fn::Join":["",[
                                    "#!/usr/bin/env python\n",
                                    "from alerta.app import app as application\n"
                                ]]}
                            },
                            "/etc/alertad.conf": {
                                "content": {"Fn::Join":["",[
                                    "SECRET_KEY='", {"Ref":"CookieSecret"}, "'\n",
                                    "AUTH_REQUIRED=True\n",
                                    "OAUTH2_CLIENT_ID='", {"Ref":"GoogleOAuthClientId"}, "'\n",
                                    "OAUTH2_CLIENT_SECRET='", {"Ref":"GoogleOAuthClientSecret"}, "'\n",
                                    "ALLOWED_EMAIL_DOMAINS=['guardian.co.uk']\n",
                                    "PLUGINS=['reject','sns']\n",
                                    "AWS_ACCESS_KEY_ID='",{"Ref":"HostKeys"},"'\n",
                                    "AWS_SECRET_ACCESS_KEY='", {"Fn::GetAtt":["HostKeys","SecretAccessKey"]}, "'\n",
                                    "AWS_REGION='", {"Ref":"AWS::Region"}, "'\n",
                                    "AWS_SNS_TOPIC='", {"Ref":"AlarmTopic"}, "'\n"
                                ]]}
                            },
                            "/var/www/alerta/app/config.js": {
                                "content": {"Fn::Join":["",[
                                    "'use strict';\n",
                                    "angular.module('config', [])\n",
                                    "  .constant('config', {\n",
                                    "    'endpoint'    : '/api',\n",
                                    "    'provider'    : 'google',\n",
                                    "    'client_id'   : '", {"Ref":"GoogleOAuthClientId"}, "'\n","  });\n"
                                ]]}
                            }
                        },
                        "services": {
                            "sysvinit": {
                                "apache2": {
                                    "enabled": "true",
                                    "ensureRunning": "true"
                                },
                                "mongodb": {
                                    "enabled": "true",
                                    "ensureRunning": "true"
                                }
                            }
                        }
                    }
                }
            },
            "Properties": {
                "ImageId": "ami-f0b11187",
                "InstanceType": {"Ref":"InstanceType"},
                "SecurityGroups" : [{"Ref" : "InstanceSecurityGroup"}],
                "KeyName": {"Ref":"KeyName"},
                "AssociatePublicIpAddress": "true",
                "UserData": {"Fn::Base64": {"Fn::Join": ["",[
                    "#!/bin/bash -v\n",

                    "function error_exit\n",
                    "{\n",
                    "  cfn-signal -e 1 -r \"$1\" '", {"Ref":"WaitHandle"}, "'\n",
                    "  exit 1\n",
                    "}\n",

                    "apt-get -y update\n",
                    "apt-get -y install build-essential python-dev python-setuptools python-pip\n",
                    "easy_install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz\n",
                    "cfn-init -s ", {"Ref":"AWS::StackId"}, " -r LaunchConfig ",
                    "         --region     ", {"Ref":"AWS::Region"}, " || error_exit 'Failed to run cfn-init'\n",

                    "adduser --system --group --disabled-password alerta\n",
                    "pip install alerta-server\n",

                    "echo \"ServerName localhost\" >> /etc/apache2/apache2.conf\n",
                    "a2enmod proxy_http\n",
                    "service apache2 reload\n",

                    "# If all went well, signal success\n",
                    "cfn-signal -e $? -r 'Server configuration' '", {"Ref":"WaitHandle"}, "'\n"
                ]]}}
            }
        },
        "WaitHandle": {
            "Type": "AWS::CloudFormation::WaitConditionHandle"
        },
        "WaitCondition": {
            "Type": "AWS::CloudFormation::WaitCondition",
            "DependsOn": "AutoScalingGroup",
            "Properties": {
                "Handle": {"Ref":"WaitHandle"},
                "Timeout": "300"
            }
        },
        "InstanceSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "SSH and HTTP",
                "VpcId": {"Ref":"VpcId"},
                "SecurityGroupIngress": [
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "80",
                        "ToPort": "80",
                        "SourceSecurityGroupId": { "Ref": "LoadBalancerSecurityGroup" }
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "8080",
                        "ToPort": "8080",
                        "SourceSecurityGroupId": { "Ref": "LoadBalancerSecurityGroup" }
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "22",
                        "ToPort": "22",
                        "CidrIp": {"Ref":"SSHLocation"}
                    }
                ]
            }
        },
        "DnsRecord": {
            "Type" : "AWS::Route53::RecordSetGroup",
            "Condition": "HasDNS",
            "Properties" : {
                "HostedZoneName" : {"Fn::Join": ["", [{"Ref" : "HostedZone"}, "."]]},
                "Comment" : "Alias for Alerta",
                "RecordSets" : [
                    {
                        "Name" : {"Fn::Join": [".", ["alerta", {"Ref" : "HostedZone"}]]},
                        "Type" : "A",
                        "AliasTarget" : {
                            "HostedZoneId" : {"Fn::GetAtt" : ["AlertaLoadBalancer", "CanonicalHostedZoneNameID"]},
                            "DNSName" : {"Fn::GetAtt": ["AlertaLoadBalancer", "DNSName"]}
                        }
                    }
                ]
            }
        }
    },

    "Outputs": {
        "AlertaURL": {
            "Value": {"Fn::Join":["",["http://",{"Fn::GetAtt":["AlertaLoadBalancer","DNSName"]}]]},
            "Description": "Alerta Web UI (only use if HostedZone not supplied)"
        },
        "AlertaApiEndpoint": {
            "Value": {"Fn::Join":["",["http://",{"Fn::GetAtt":["AlertaLoadBalancer","DNSName"]},"/api"]]},
            "Description": "Alerta API Endpoint (only use if HostedZone not supplied)"
        }
    }
}
