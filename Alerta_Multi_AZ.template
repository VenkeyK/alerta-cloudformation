{
  "AWSTemplateFormatVersion" : "2010-09-09",

  "Description" : "Alerta - multiple instances behind an ELB",

  "Parameters" : {

    "KeyName": {
        "Default": "bootstrap",
        "Description": "Name of an existing EC2 KeyPair for SSH access",
        "Type": "String"
    },

    "Stage": {
      "Description": "Stage",
      "Type": "String",
      "Default": "PROD",
      "AllowedValues": [ "PROD", "CODE" ],
      "ConstraintDescription": "must be a valid stage eg. PROD, CODE"
    },

    "Capacity": {
      "Description": "Autoscale Size",
      "Type": "Number",
      "Default": "1",
      "MinValue": 1,
      "MaxValue": 4
    },

    "InstanceType" : {
      "Description" : "EC2 instance type",
      "Type" : "String",
      "Default" : "m1.small",
      "AllowedValues" : [
        "t2.micro",
        "m1.small",
        "m1.medium",
        "m1.large",
        "m1.xlarge",
        "m2.xlarge",
        "m2.2xlarge",
        "m2.4xlarge",
        "m3.xlarge",
        "m3.2xlarge",
        "c1.medium",
        "c1.xlarge",
        "cc1.4xlarge",
        "cc2.8xlarge",
        "cg1.4xlarge"
      ],
      "ConstraintDescription" : "must be a valid EC2 instance type."
    },

    "DBUsername": {
      "Default": "alerta",
      "Description" : "Username for the MongoDB Alerta database",
      "Type": "String",
      "MinLength": "1",
      "MaxLength": "16",
      "AllowedPattern" : "[a-zA-Z][a-zA-Z0-9]*",
      "ConstraintDescription" : "must begin with a letter and contain only alphanumeric characters"
    },

    "DBPassword": {
      "Default": "alerta",
      "NoEcho": "true",
      "Description" : "Password for the MongoDB Alerta database",
      "Type": "String",
      "MinLength": "1",
      "MaxLength": "41",
      "AllowedPattern" : "[a-zA-Z0-9]+",
      "ConstraintDescription" : "must contain only alphanumeric characters"
    },

    "GoogleOAuthClientId": {
      "Description": "Google OAuth 2.0 Client ID",
      "Type": "String"
    },
    "GoogleOAuthClientSecret": {
      "Description": "Google OAuth 2.0 Client Secret",
      "Type": "String"
    },

    "VpcId": {
      "Description": "ID of the VPC onto which to launch the application eg. vpc-1234abcd",
      "Type": "String"
    },
    "VpcSubnets" : {
      "Description": "Subnets to use in VPC eg. subnet-abcd1234",
      "Type": "CommaDelimitedList"
    },

    "AlarmTopic": {
      "Default": "alarm-topic",
      "Description": "Output alarm notification topic",
      "Type": "String",
      "AllowedPattern": "[a-zA-Z0-9-]+"
    },

    "OperatorEmail": {
      "Description": "email address to notify if there are operational issues",
      "Type": "String"
    },

    "SSHLocation" : {
      "Description" : "The IP address range that can be used to SSH to the EC2 instances",
      "Type": "String",
      "MinLength": "9",
      "MaxLength": "18",
      "Default": "0.0.0.0/0",
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x"
    }
  },

  "Mappings" : {
    "RegionMap" : {
      "us-east-1"      : { "AMI" : "ami-30519058" },
      "us-west-2"      : { "AMI" : "ami-5b58266b" },
      "us-west-1"      : { "AMI" : "ami-957070d0" },
      "eu-west-1"      : { "AMI" : "ami-3986524e" },
      "ap-southeast-1" : { "AMI" : "ami-dad68888" },
      "ap-northeast-1" : { "AMI" : "ami-cb4610ca" },
      "ap-southeast-2" : { "AMI" : "ami-eb6d0ad1" },
      "sa-east-1"      : { "AMI" : "ami-1189270c" }
    }
  },

  "Resources" : {

    "CfnUser" : {
      "Type" : "AWS::IAM::User",
      "Properties" : {
        "Path": "/",
        "Policies": [{
          "PolicyName": "root",
          "PolicyDocument": { "Statement":[
            {
              "Effect": "Allow",
              "Action": "SNS:*",
              "Resource": "*"
            }
          ]}
        }]
      }
    },

    "HostKeys" : {
      "Type" : "AWS::IAM::AccessKey",
      "Properties" : {
        "UserName" : {"Ref": "CfnUser"}
      }
    },

    "AlarmSnsTopic": {
      "Type": "AWS::SNS::Topic",
      "Properties": {
        "TopicName": { "Ref": "AlarmTopic" },
        "Subscription": [ { "Endpoint": { "Ref": "OperatorEmail" }, "Protocol": "email" } ]
      }
    },

    "LoadBalancer": {
      "Type": "AWS::ElasticLoadBalancing::LoadBalancer",
      "Properties": {
        "AvailabilityZones": { "Fn::GetAZs": "" },
        "CrossZone": true,
        "Listeners": [
          {
            "Protocol": "HTTP",
            "LoadBalancerPort": "80",
            "InstancePort": "80"
          },
          {
            "Protocol": "HTTP",
            "LoadBalancerPort": "8080",
            "InstancePort": "8080"
          }
        ],
        "HealthCheck": {
          "Target": "HTTP:8080/_",
          "Timeout": "10",
          "Interval": "20",
          "UnhealthyThreshold": "10",
          "HealthyThreshold": "2"
        }
      }
    },

  "AutoscalingGroup": {
    "Type": "AWS::AutoScaling::AutoScalingGroup",
    "Properties": {
      "AvailabilityZones": { "Fn::GetAZs": "" },
      "LaunchConfigurationName": { "Ref": "LaunchConfig" },
      "MinSize": "1",
      "MaxSize": "4",
      "DesiredCapacity": { "Ref": "Capacity" },
      "HealthCheckType": "ELB",
      "HealthCheckGracePeriod": 600,
      "LoadBalancerNames": [ { "Ref": "LoadBalancer" } ],
      "Tags": [
        {
          "Key": "Stage",
          "Value": { "Ref": "Stage" },
          "PropagateAtLaunch": "true"
        },
        {
          "Key": "Name",
          "Value": "Alerta",
          "PropagateAtLaunch": "true"
        }
      ]
    }
  },

  "LaunchConfig": {
    "Type": "AWS::AutoScaling::LaunchConfiguration",
      "Metadata" : {
        "AWS::CloudFormation::Init" : {
          "config" : {
            "packages" : {
              "apt" : {
                "apache2"             : [],
                "libapache2-mod-wsgi" : [],
                "mongodb-server"      : []
              },
              "python": {
                "alerta-server" : []
              }
            },

            "sources" : {
              "/var/www/alerta" : "https://github.com/alerta/angular-alerta-webui/tarball/master"
            },

            "files" : {
              "/etc/apache2/sites-available/alerta.conf" : {
                "content": { "Fn::Join" : ["", [
                  "Listen 8080\n",
                  "<VirtualHost *:8080>\n",
                  "    WSGIDaemonProcess alerta processes=5 threads=5\n",
                  "    WSGIScriptAlias / /var/www/html/alerta.wsgi\n",
                  "    <Directory /var/www/html>\n",
                  "        WSGIApplicationGroup %{GLOBAL}\n",
                  "        Require all granted\n",
                  "    </Directory>\n",
                  "</VirtualHost>\n"
                ]]}
              },
              "/var/www/html/alerta.wsgi" : {
                "content": { "Fn::Join" : ["", [
                  "from alerta.app import app as application\n"
                ]]}
              },
              "/etc/alerta/alerta.conf" : {
                "content": { "Fn::Join" : ["", [
                  "[DEFAULT]\n",
                  "endpoint = http://localhost:8080\n",
                  "mongo_username = ", { "Ref": "DBUsername" }, "\n",
                  "mongo_password = ", { "Ref": "DBPassword" }, "\n",
                  "transport = sns\n",
                  "output_topic = ", { "Fn::GetAtt" : ["AlarmSnsTopic", "TopicName"]}, "\n",
                  "aws_access_key_id = ", {"Ref" : "HostKeys" }, "\n",
                  "aws_secret_access_key = ", {"Fn::GetAtt": ["HostKeys", "SecretAccessKey"]}, "\n",
                  "sns_region = ", { "Ref": "AWS::Region" }, "\n"
                ]]}
              }
            },

            "services" : {
              "sysvinit" : {
                "apache2" : { "enabled" : "true", "ensureRunning" : "true" },
                "mongodb" : { "enabled" : "true", "ensureRunning" : "true" }
              }
            }
          }
        }
      },

      "Properties": {
        "ImageId": { "Fn::FindInMap" : [ "RegionMap", { "Ref" : "AWS::Region" }, "AMI" ]},
        "InstanceType"   : { "Ref" : "InstanceType" },
        "SecurityGroups" : [ {"Ref" : "SecurityGroup"} ],
        "KeyName"        : { "Ref" : "KeyName" },
        "UserData"       : { "Fn::Base64" : { "Fn::Join" : ["", [
          "#!/bin/bash -v\n",

          "# Helper function\n",
          "function error_exit\n",
          "{\n",
          "  /opt/aws/bin/cfn-signal -e 1 -r \"$1\" '", { "Ref" : "WaitHandle" }, "'\n",
          "  exit 1\n",
          "}\n",

          "apt-get -y install python-setuptools\n",
          "easy_install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz\n",
          "cfn-init -s ", { "Ref" : "AWS::StackId" }, " -r LaunchConfig ",
          "    --region ", { "Ref" : "AWS::Region" }, " || error_exit 'Failed to run cfn-init'\n",

          "while ! pgrep -fl mongodb; do echo Waiting for MongoDB to start; sleep 5; done\n",
          "mongo monitoring --eval 'db.addUser({user:\"", { "Ref" : "DBUsername" }, "\", pwd:\"", { "Ref" : "DBPassword" }, "\", roles:[\"readWrite\"]})'",
          " >/tmp/mongo.log 2>&1 || error_exit 'Failed to create MongoDB user'\n",

          "cp -R /var/www/alerta/app/* /var/www/html\n",
          "rm -Rf /var/www/alerta\n",

          "a2ensite alerta\n",
          "service apache2 reload\n",

          "cfn-signal -e $? -r 'Alerta server configuration' '", { "Ref" : "WaitHandle" }, "'\n"

        ]]}}
      }
    },

    "WaitHandle" : {
      "Type" : "AWS::CloudFormation::WaitConditionHandle"
    },

    "WaitCondition" : {
      "Type" : "AWS::CloudFormation::WaitCondition",
      "DependsOn" : "AutoscalingGroup",
      "Properties" : {
        "Handle" : {"Ref" : "WaitHandle"},
        "Timeout" : "900"
      }
    },

    "SecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "HTTP and SSH",
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "80",
            "ToPort": "80",
            "SourceSecurityGroupName": "amazon-elb-sg",
            "SourceSecurityGroupOwnerId": "amazon-elb"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "8080",
            "ToPort": "8080",
            "SourceSecurityGroupName": "amazon-elb-sg",
            "SourceSecurityGroupOwnerId": "amazon-elb"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "22",
            "ToPort": "22",
            "CidrIp": { "Ref" : "SSHLocation"}
          }
        ]
      }
    }
  },

  "Outputs" : {
    "AlertaURL" : {
      "Value" : { "Fn::Join" : ["", ["http://", { "Fn::GetAtt" : [ "LoadBalancer", "DNSName" ]}, "/"]] },
      "Description" : "Alerta Web UI"
    },
    "AlertaApiEndpoint" : {
      "Value" : { "Fn::Join" : ["", ["http://", { "Fn::GetAtt" : [ "LoadBalancer", "DNSName" ]}, ":8080"]] },
      "Description" : "Alerta API Endpoint"
    },
    "GoogleOAuthRedirectUrl": {
      "Value": { "Fn::Join": ["", ["http://", { "Fn::GetAtt": [ "LoadBalancer", "DNSName" ]}, "/auth/google/callback"]] },
      "Description": "Redirect URL for the Google Developers Console"
    }
  }
}
