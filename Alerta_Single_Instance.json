{
    "AWSTemplateFormatVersion": "2010-09-09",

    "Description": "Alerta monitoring system",

    "Parameters": {
        "KeyName": {
            "Description": "Name of an existing EC2 KeyPair for SSH access",
            "Type": "AWS::EC2::KeyPair::KeyName",
            "Default": "bootstrap"
        },
        "Stack": {
            "Description": "Stack",
            "Type": "String",
            "Default": "monitoring"
        },
        "App": {
            "Description": "App name",
            "Type": "String",
            "Default": "alerta"
        },
        "Stage": {
            "Description": "Stage",
            "Type": "String",
            "Default": "PROD",
            "AllowedValues": ["PROD","DEV", "TEST"],
            "ConstraintDescription": "must be a valid stage eg. PROD, DEV, TEST"
        },
        "InstanceType": {
            "Description": "EC2 instance type",
            "Type": "String",
            "Default": "t2.micro",
            "AllowedValues": [
                "t2.micro",
                "t2.small",
                "t2.medium"
            ],
            "ConstraintDescription": "must be a valid EC2 instance type."
        },
        "AuthProvider": {
            "Description": "Authentication provider for user logins",
            "Type": "String",
            "Default": "basic",
            "AllowedValues": ["basic","google","github"],
            "ConstraintDescription": "Authentication provider must be one of basic, google or github"
        },
        "OAuthClientId": {
            "Description": "OAuth2 Client ID for Google or GitHub",
            "Type": "String"
        },
        "OAuthClientSecret": {
            "Description": "OAuth2 Client Secret for Google or GitHub",
            "Type": "String"
        },
        "AllowedDomain": {
            "Description": "Allowed email domain eg. gmail.com or example.com",
            "Type": "String",
            "Default": "*"
        },
        "AlarmTopic": {
            "Default": "alarm-topic",
            "Description": "Output alarm notification topic",
            "Type": "String",
            "AllowedPattern": "[a-zA-Z0-9-]+"
        },
        "OperatorEmail": {
            "Description": "email address to notify if there are operational issues",
            "Type": "String",
            "MinLength": "5",
            "AllowedPattern": "\\w[a-zA-Z0-9_\\-\\.]*@\\w[a-zA-Z0-9\\-\\.]*",
            "ConstraintDescription": "Must be a valid email address."
        },
        "VpcId": {
            "Description": "ID of the VPC onto which to launch the application eg. vpc-1234abcd",
            "Type": "AWS::EC2::VPC::Id"
        },
        "PublicVpcSubnet": {
            "Description": "Subnet to use in VPC for public internet-facing instance eg. subnet-abcd1234",
            "Type": "AWS::EC2::Subnet::Id"
        },
        "SSHLocation": {
            "Description": "The IP address range that can be used to SSH to the EC2 instances",
            "Type": "String",
            "MinLength": "9",
            "MaxLength": "18",
            "Default": "0.0.0.0/0",
            "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
            "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x"
        }
    },

    "Mappings" : {
        "RegionMap" : {
            "us-east-1" :      { "ImageId": "ami-8d4071e7" },
            "us-west-2" :      { "ImageId": "ami-4b37d42b" },
            "us-west-1" :      { "ImageId": "ami-bcafdedc" },
            "eu-west-1" :      { "ImageId": "ami-36289a45" },
            "eu-central-1" :   { "ImageId": "ami-30677d5c" },
            "ap-southeast-1" : { "ImageId": "ami-af965fcc" },
            "ap-northeast-1" : { "ImageId": "ami-552a2b3b" },
            "ap-southeast-2" : { "ImageId": "ami-5195b232" },
            "sa-east-1" :      { "ImageId": "ami-df0586b3" }
        }
    },

    "Resources": {
        "CfnUser": {
            "Type": "AWS::IAM::User",
            "Properties": {
                "Path": "/",
                "Policies": [
                    {
                        "PolicyName": "root",
                        "PolicyDocument": {
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": "SNS:*",
                                    "Resource": "*"
                                }
                            ]
                        }
                    }
                ]
            }
        },
        "HostKeys": {
            "Type": "AWS::IAM::AccessKey",
            "Properties": {
                "UserName": {"Ref":"CfnUser"}
            }
        },
        "AlarmSnsTopic": {
            "Type": "AWS::SNS::Topic",
            "Properties": {
                "TopicName": {"Ref":"AlarmTopic"},
                "Subscription": [
                    {
                        "Endpoint": {"Ref":"OperatorEmail"},
                        "Protocol": "email"
                    }
                ]
            }
        },
        "IPAddress": {
            "Type": "AWS::EC2::EIP",
            "Properties": {
                "Domain": "vpc",
                "InstanceId": {"Ref":"Ec2Instance"}
            }
        },
        "Ec2Instance": {
            "Type": "AWS::EC2::Instance",
            "Metadata": {
                "AWS::CloudFormation::Init": {
                    "config": {
                        "packages": {
                            "apt": {
                                "apache2": [],
                                "libapache2-mod-wsgi": [],
                                "mongodb-server": []
                            }
                        },
                        "sources": {
                            "/var/www/alerta": "https://github.com/alerta/angular-alerta-webui/tarball/master"
                        },
                        "files": {
                            "/etc/apache2/sites-available/000-default.conf": {
                                "content": {"Fn::Join":["",[
                                    "Listen 8080\n","<VirtualHost *:8080>\n",
                                    "  ServerName localhost\n",
                                    "  WSGIDaemonProcess alerta processes=5 threads=5\n",
                                    "  WSGIProcessGroup alerta\n",
                                    "  WSGIApplicationGroup %{GLOBAL}\n",
                                    "  WSGIScriptAlias / /var/www/api.wsgi\n",
                                    "  WSGIPassAuthorization On\n",
                                    "  ErrorLog ${APACHE_LOG_DIR}/error.log\n",
                                    "  CustomLog ${APACHE_LOG_DIR}/access.log combined\n",
                                    "</VirtualHost>\n",
                                    "<VirtualHost *:80>\n",
                                    "  ProxyPass /api http://localhost:8080\n",
                                    "  ProxyPassReverse /api http://localhost:8080\n",
                                    "  DocumentRoot /var/www/alerta/app\n",
                                    "</VirtualHost>\n"
                                ]]}
                            },
                            "/var/www/api.wsgi": {
                                "content": {"Fn::Join":["",[
                                    "#!/usr/bin/env python\n",
                                    "from alerta.app import app as application\n"
                                ]]}
                            },
                            "/etc/alertad.conf": {
                                "content": {"Fn::Join":["",[
                                    "SECRET_KEY='notasecret'\n",
                                    "AUTH_REQUIRED=True\n",
                                    "OAUTH2_CLIENT_ID='", {"Ref":"OAuthClientId"}, "'\n",
                                    "OAUTH2_CLIENT_SECRET='", {"Ref":"OAuthClientSecret"}, "'\n",
                                    "ALLOWED_EMAIL_DOMAINS=['", {"Ref":"AllowedDomain"}, "']\n",
                                    "ALLOWED_GITHUB_ORGS=['*']\n",
                                    "PLUGINS=['reject','sns']\n",
                                    "AWS_ACCESS_KEY_ID='",{"Ref":"HostKeys"},"'\n",
                                    "AWS_SECRET_ACCESS_KEY='", {"Fn::GetAtt":["HostKeys","SecretAccessKey"]}, "'\n",
                                    "AWS_REGION='", {"Ref":"AWS::Region"}, "'\n",
                                    "AWS_SNS_TOPIC='", {"Ref":"AlarmTopic"}, "'\n"
                                ]]}
                            },
                            "/var/www/alerta/app/config.js": {
                                "content": {"Fn::Join":["",[
                                    "'use strict';\n",
                                    "angular.module('config', [])\n",
                                    "  .constant('config', {\n",
                                    "    'endpoint'    : '/api',\n",
                                    "    'provider'    : '", {"Ref":"AuthProvider"}, "',\n",
                                    "    'client_id'   : '", {"Ref":"OAuthClientId"}, "'\n",
                                    "});\n"
                                ]]}
                            }
                        },
                        "services": {
                            "sysvinit": {
                                "apache2": {
                                    "enabled": "true",
                                    "ensureRunning": "true"
                                },
                                "mongodb": {
                                    "enabled": "true",
                                    "ensureRunning": "true"
                                }
                            }
                        }
                    }
                }
            },
            "Properties": {
                "ImageId": { "Fn::FindInMap" : [ "RegionMap", { "Ref" : "AWS::Region" }, "ImageId" ]},
                "InstanceType": {"Ref":"InstanceType"},
                "SecurityGroupIds": [{"Ref":"InstanceSecurityGroup"}],
                "SubnetId": {"Ref":"PublicVpcSubnet"},
                "KeyName": {"Ref":"KeyName"},
                "Tags": [
                    {"Key":"Name","Value":{"Fn::Join":[":",[{"Ref":"Stage"},"alerta"]]}},
                    {"Key":"Stage","Value":{"Ref":"Stage"}},
                    {"Key":"Stack","Value":{"Ref":"Stack"}},
                    {"Key":"App","Value":"alerta"}
                ],
                "UserData": {"Fn::Base64": {"Fn::Join": ["",[
                    "#!/bin/bash -v\n",

                    "function error_exit\n",
                    "{\n",
                    "  cfn-signal -e 1 -r \"$1\" '", {"Ref":"WaitHandle"}, "'\n",
                    "  exit 1\n",
                    "}\n",

                    "apt-get -y update\n",
                    "apt-get -y install build-essential python python-dev python-setuptools python-pip libffi-dev\n",
                    "easy_install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz\n",
                    "cfn-init -s ", {"Ref":"AWS::StackId"}, " -r Ec2Instance ",
                    "         --region     ", {"Ref":"AWS::Region"}, " || error_exit 'Failed to run cfn-init'\n",

                    "adduser --system --group --disabled-password alerta\n",
                    "pip install alerta-server\n",

                    "sed -i -e s,notasecret,$(< /dev/urandom tr -dc A-Za-z0-9_\\!\\@\\#\\$\\%\\^\\&\\*\\(\\)-+= | head -c 32), /etc/alertad.conf\n",

                    "echo \"ServerName localhost\" >> /etc/apache2/apache2.conf\n",
                    "a2enmod proxy_http\n",
                    "service apache2 reload\n",

                    "# If all went well, signal success\n",
                    "cfn-signal -e $? -r 'Server configuration' '", {"Ref":"WaitHandle"}, "'\n"
                ]]}}
            }
        },
        "WaitHandle": {
            "Type": "AWS::CloudFormation::WaitConditionHandle"
        },
        "WaitCondition": {
            "Type": "AWS::CloudFormation::WaitCondition",
            "DependsOn": "Ec2Instance",
            "Properties": {
                "Handle": {"Ref":"WaitHandle"},
                "Timeout": "300"
            }
        },
        "InstanceSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "Enable HTTP access via port 80 and port 8080 and SSH access",
                "VpcId": {"Ref":"VpcId"},
                "SecurityGroupIngress": [
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "80",
                        "ToPort": "80",
                        "CidrIp": "0.0.0.0/0"
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "22",
                        "ToPort": "22",
                        "CidrIp": {"Ref":"SSHLocation"}
                    }
                ]
            }
        }
    },
    "Outputs": {
        "AlertaURL": {
            "Value": {"Fn::Join":["",["http://",{"Fn::GetAtt":["Ec2Instance","PublicDnsName"]}]]},
            "Description": "Alerta Web UI"
        },
        "AlertaApiEndpoint": {
            "Value": {"Fn::Join":["",["http://",{"Fn::GetAtt":["Ec2Instance","PublicDnsName"]},"/api"]]},
            "Description": "Alerta API Endpoint"
        }
    }
}