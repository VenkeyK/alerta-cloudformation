AWSTemplateFormatVersion: '2010-09-09'
Metadata:
  License: Apache-2.0
Description: Alerta monitoring system
Parameters:
  KeyName:
    Description: Name of an existing EC2 KeyPair for SSH access
    Type: AWS::EC2::KeyPair::KeyName
    Default: bootstrap
  InstanceType:
    Description: EC2 instance type
    Type: String
    Default: t2.micro
    AllowedValues:
    - t2.micro
    - t2.small
    - t2.medium
    ConstraintDescription: must be a valid EC2 instance type.
  SecretKey:
    Description: Application secret key eg. any random string
    Type: String
  AuthProvider:
    Description: Authentication provider for user logins
    Type: String
    Default: basic
    AllowedValues:
    - basic
    - google
    - github
    ConstraintDescription: Authentication provider must be one of basic, google or
      github
  OAuthClientId:
    Description: OAuth2 Client ID for Google or GitHub
    Type: String
  OAuthClientSecret:
    Description: OAuth2 Client Secret for Google or GitHub
    Type: String
  GitLabServer:
    Description: GitLab server
    Type: String
  AllowedDomain:
    Description: Allowed email domain eg. gmail.com or example.com
    Type: String
    Default: '*'
  TrackingId:
    Description: Google analytics tracking Id
    Type: String
  AlarmTopic:
    Default: alarm-topic
    Description: Output alarm notification topic
    Type: String
    AllowedPattern: '[a-zA-Z0-9-]+'
  OperatorEmail:
    Description: email address to notify if there are operational issues
    Type: String
    MinLength: '5'
    AllowedPattern: \w[a-zA-Z0-9_\-\.]*@\w[a-zA-Z0-9\-\.]*
    ConstraintDescription: Must be a valid email address.
  VpcId:
    Description: ID of the VPC onto which to launch the application eg. vpc-1234abcd
    Type: AWS::EC2::VPC::Id
  PublicVpcSubnet:
    Description: Subnet to use in VPC for public internet-facing instance eg. subnet-abcd1234
    Type: AWS::EC2::Subnet::Id
  SSHLocation:
    Description: The IP address range that can be used to SSH to the EC2 instances
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 0.0.0.0/0
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x
Mappings:
  RegionMap:
    us-east-1:
      ImageId: ami-8d4071e7
    us-west-2:
      ImageId: ami-4b37d42b
    us-west-1:
      ImageId: ami-bcafdedc
    eu-west-1:
      ImageId: ami-36289a45
    eu-central-1:
      ImageId: ami-30677d5c
    ap-southeast-1:
      ImageId: ami-af965fcc
    ap-northeast-1:
      ImageId: ami-552a2b3b
    ap-southeast-2:
      ImageId: ami-5195b232
    sa-east-1:
      ImageId: ami-df0586b3
Resources:
  CfnUser:
    Type: AWS::IAM::User
    Properties:
      Path: "/"
      Policies:
      - PolicyName: root
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action: SNS:*
            Resource: "*"
  HostKeys:
    Type: AWS::IAM::AccessKey
    Properties:
      UserName: !Ref CfnUser
  AlarmSnsTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Ref AlarmTopic
      Subscription:
      - Endpoint: !Ref OperatorEmail
        Protocol: email
  IPAddress:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      InstanceId: !Ref Ec2Instance
  Ec2Instance:
    Type: AWS::EC2::Instance
    Metadata:
      AWS::CloudFormation::Init:
        config:
          packages:
            apt:
              apache2: []
              libapache2-mod-wsgi: []
              mongodb-server: []
          sources:
            /var/www/alerta: https://github.com/alerta/angular-alerta-webui/tarball/master
          files:
            /etc/apache2/sites-available/000-default.conf:
              content: !Sub |
                Listen 8080
                <VirtualHost *:8080>
                  ServerName localhost
                  WSGIDaemonProcess alerta processes=5 threads=5
                  WSGIProcessGroup alerta
                  WSGIApplicationGroup %{GLOBAL}
                  WSGIScriptAlias / /var/www/api.wsgi
                  WSGIPassAuthorization On
                  ErrorLog ${!APACHE_LOG_DIR}/error.log
                  CustomLog ${!APACHE_LOG_DIR}/access.log combined
                </VirtualHost>
                <VirtualHost *:80>
                  ProxyPass /api http://localhost:8080
                  ProxyPassReverse /api http://localhost:8080
                  DocumentRoot /var/www/alerta/app
                </VirtualHost>
            /var/www/api.wsgi:
              content: !Sub |
                #!/usr/bin/env python
                from alerta.app import app as application
            /etc/alertad.conf:
              content: !Sub |
                SECRET_KEY='${SecretKey}'
                AUTH_REQUIRED=True
                OAUTH2_CLIENT_ID='${OAuthClientId}'
                OAUTH2_CLIENT_SECRET='${OAuthClientSecret}'
                ALLOWED_EMAIL_DOMAINS=['${AllowedDomain}']
                ALLOWED_GITHUB_ORGS=['*']
                PLUGINS=['reject','sns']
                AWS_ACCESS_KEY_ID='${HostKeys}'
                AWS_SECRET_ACCESS_KEY='${HostKeys.SecretAccessKey}'
                AWS_REGION='${AWS::Region}'
                AWS_SNS_TOPIC='${AlarmTopic}'
            /var/www/alerta/app/config.js:
              content: !Sub |
                'use strict';
                angular.module('config', [])
                  .constant('config', {
                    'endpoint'    : '/api',
                    'provider'    : '${AuthProvider}',
                    'client_id'   : '${OAuthClientId}',
                    'gitlab_url'  : '${GitLabServer}',  // only required if using self-hosted Gitlab
                    'colors'      : {}, // use default colors
                    'severity'    : {}, // use default severity codes
                    'audio'       : {}, // no audio
                    'tracking_id' : '${TrackingId}'  // Google Analytics tracking ID eg. UA-NNNNNN-N
                  });
          services:
            sysvinit:
              apache2:
                enabled: true
                ensureRunning: true
              mongodb:
                enabled: true
                ensureRunning: true
    Properties:
      ImageId: !FindInMap [RegionMap, !Ref 'AWS::Region', ImageId]
      InstanceType: !Ref InstanceType
      SecurityGroupIds: [!Ref InstanceSecurityGroup]
      SubnetId: !Ref PublicVpcSubnet
      KeyName: !Ref KeyName
      Tags:
      - Key: Name
        Value: Alerta
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -v

          # Helper function
          function error_exit
          {
            /opt/aws/bin/cfn-signal -e 1 -r "$1" 'WaitHandle'
            exit 1
          }
          apt-get -y update
          apt-get -y install build-essential python python-dev python-setuptools python-pip libffi-dev
          easy_install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz
          cfn-init -s AWS::StackName -r Ec2Instance --region AWS::Region || error_exit 'Failed to run cfn-init'

          adduser --system --group --disabled-password alerta
          pip install alerta-server
          echo "ServerName localhost" >> /etc/apache2/apache2.conf
          a2enmod proxy_http
          service apache2 reload

          # Server setup completed, signal success
          cfn-signal -e $? -r 'Server configuration' 'WaitHandle'
  WaitHandle:
    Type: AWS::CloudFormation::WaitConditionHandle
  WaitCondition:
    Type: AWS::CloudFormation::WaitCondition
    DependsOn: Ec2Instance
    Properties:
      Handle: !Ref WaitHandle
      Timeout: '300'
  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable SSH access via port 22 and HTTP access via port 80
      VpcId: !Ref VpcId
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '80'
        ToPort: '80'
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: '22'
        ToPort: '22'
        CidrIp: !Ref SSHLocation
Outputs:
  AlertaURL:
    Description: Alerta Web UI
    Value: !Sub "http://${Ec2Instance.PublicDnsName}"
  AlertaApiEndpoint:
    Description: Alerta API Endpoint
    Value: !Sub "http://${Ec2Instance.PublicDnsName}/api"
